#!/bin/bash

# arch install script ][ btrfs filesytem

# get package file
# [[ -f /usr/bin/curl ]] || sudo pacman --noconfirm -S curl 
# curl https://sachinxyz.github.io/pkg.txt -o pkg.txt

# wrapper to print out 
 eco(){ echo -e "\e[93m${*}\e[0m"
 }

 set -e

eco "# === arch linux installation script" 
 DISK=/dev/nvme0n1
 BOOT_PART=${DISK}p1
 ROOT_PART=${DISK}p2

eco === formate EFI partition 'yes' or 'no'
 EFI_FORMAT=yes

 PACKAGES_LIST=pkg.txt

eco === formate EFI/boot parition to vfat 'BOOT_PART'
 [[ "${EFI_FORMAT}" == "yes" ]] && mkfs.vfat ${BOOT_PART}

eco === formate 'root' partition to btrfs file system
 mkfs.btrfs -f ${ROOT_PART} 

eco === mount 'root' partition
 mount ${ROOT_PART} /mnt

eco === create btrfs subvolumes
 btrfs su cr /mnt/@                                     # create root subvol
 btrfs su cr /mnt/@home                                 # create home subvol
 btrfs su cr /mnt/@var                                  # create var  subvol

eco === umount 'root' partition
 umount /mnt

eco === mount btrfs 'root' subvolume
 mount -o autodefrag,compress=zstd,discard=async,noatime,space_cache=v2,ssd,ssd_spread,subvol=@ ${ROOT_PART} /mnt

eco === create folders to mount home and var subvolumes
 mkdir -p /mnt/{boot/efi,home,var}

eco === mount 'home' subvloume
 mount -o autodefrag,compress=zstd,discard=async,noatime,space_cache=v2,ssd,ssd_spread,subvol=@home ${ROOT_PART} /mnt/home

eco === mount 'var' subvolume
 mount -o autodefrag,compress=zstd,discard=async,noatime,space_cache=v2,ssd,ssd_spread,subvol=@var ${ROOT_PART} /mnt/var

eco === mount 'EFI' partition
 mount ${BOOT_PART} /mnt/boot/efi

eco === sync time
 timedatectl set-ntp true

eco === install arch linux base
 pacstrap /mnt $(awk '/^\[B\]/ {print $2}' ${PACKAGES_LIST})

eco === generate an fstab file
 genfstab -U /mnt >> /mnt/etc/fstab

eco === creat post script
 awk '/\[ ARCH LINUX POST INSTALL \]/','/#\[ THE END \]/' ${0} > /mnt/postinstall.sh
 cp -f pkg.txt /mnt

eco === arch-chroot
 arch-chroot /mnt bash postinstall.sh

eco === exit script
 exit

echo =======[ ARCH LINUX POST INSTALL ]================================================================================

# wrapper to print out 
 eco(){ echo -e "\e[93m${*}\e[0m"
 }

PACKAGES_LIST=pkg.txt

eco === enter info
read -p " Enter your userName: " userName
read -p " Enter your hostName: " hostName
read -p " Enter passWord: " passWord

eco === clear screen 
 printf '\033c'

eco === Set time zone
 ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime

eco === Run hwclock to generate /etc/adjtime
 hwclock --systohc

eco === sync time
 timedatectl set-ntp true

eco === Edit /etc/locale.gen and uncomment en_US.UTF-8 UTF-8 and other needed locales.
 echo "en_US.UTF-8 UTF-8" > /etc/locale.gen

eco === Generate the locales 
 locale-gen

eco === Edit locale.conf
 echo "LANG=en_US.UTF-8" > /etc/locale.conf

eco === Set the console keyboard layout
 echo "KEYMAP=us" > /etc/vconsole.conf

eco === Set hostname
 echo "${hostName}" > /etc/hostname

eco === Create /etc/hots file
 echo "127.0.0.1       localhost"  > /etc/hosts
 echo "::1             localhost" >> /etc/hosts
 echo "127.0.1.1       ${hostName}.localdomain ${hostName}" >> /etc/hosts

eco === recreate the initramfs image
 mkinitcpio -P

eco === Set root password
 echo root:${passWord} | chpasswd

eco === Install grub bootloader
 grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ArchGRUB
 sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=2/g' /etc/default/grub
 grub-mkconfig -o /boot/grub/grub.cfg

eco === Create user
 useradd -m -G wheel -s /bin/bash ${userName}

eco === Set user password
 echo "${userName}:${passWord}" | chpasswd

eco === install arch packages
# pacman --noconfirm --needed -S $(awk '/^\[\*\]/ {print $2}' ${PACKAGES_LIST})

eco === Enable services to start at Boot
 systemctl enable NetworkManager.service 
 systemctl enable cronie.service


